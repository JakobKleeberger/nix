# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."viewtube-viewtube" = {
    image = "";
    environment = {
      "VIEWTUBE_ADMIN_USER" = "admin";
      "VIEWTUBE_DATABASE_HOST" = "viewtube-db";
      "VIEWTUBE_REDIS_HOST" = "viewtube-redis";
    };
    volumes = [
      "/home/homelab/.nix/servers/viewtube/data:/data:rw"
    ];
    ports = [
      "8066:8066/tcp"
    ];
    dependsOn = [
      "viewtube-viewtube-db"
      "viewtube-viewtube-redis"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=viewtube"
      "--network=viewtube_viewtube-local"
    ];
  };
  systemd.services."docker-viewtube-viewtube" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-viewtube_viewtube-local.service"
    ];
    requires = [
      "docker-network-viewtube_viewtube-local.service"
    ];
    partOf = [
      "docker-compose-viewtube-root.target"
    ];
    wantedBy = [
      "docker-compose-viewtube-root.target"
    ];
  };
  virtualisation.oci-containers.containers."viewtube-viewtube-db" = {
    image = "mongo";
    ports = [
      "27018:27017/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=viewtube-db"
      "--network=viewtube_viewtube-local"
    ];
  };
  systemd.services."docker-viewtube-viewtube-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-viewtube_viewtube-local.service"
    ];
    requires = [
      "docker-network-viewtube_viewtube-local.service"
    ];
    partOf = [
      "docker-compose-viewtube-root.target"
    ];
    wantedBy = [
      "docker-compose-viewtube-root.target"
    ];
  };
  virtualisation.oci-containers.containers."viewtube-viewtube-redis" = {
    image = "redis";
    log-driver = "journald";
    extraOptions = [
      "--network-alias=viewtube-redis"
      "--network=viewtube_viewtube-local"
    ];
  };
  systemd.services."docker-viewtube-viewtube-redis" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-viewtube_viewtube-local.service"
    ];
    requires = [
      "docker-network-viewtube_viewtube-local.service"
    ];
    partOf = [
      "docker-compose-viewtube-root.target"
    ];
    wantedBy = [
      "docker-compose-viewtube-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-viewtube_viewtube-local" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f viewtube_viewtube-local";
    };
    script = ''
      docker network inspect viewtube_viewtube-local || docker network create viewtube_viewtube-local
    '';
    partOf = [ "docker-compose-viewtube-root.target" ];
    wantedBy = [ "docker-compose-viewtube-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-viewtube-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
