# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."orcldb-oracle-db" = {
    image = "container-registry.oracle.com/database/enterprise:latest";
    environment = {
      "ORACLE_PDB" = "ORCLPDB1";
      "ORACLE_PWD" = "oracle";
      "ORACLE_SID" = "ORCLCDB";
    };
    volumes = [
      "orcldb_oracle-backup:/opt/oracle/backup:rw"
      "orcldb_oracle-data:/opt/oracle/oradata:rw"
    ];
    ports = [
      "1521:1521/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=[\"sqlplus\",\"-L\",\"sys/Oracle_123@//localhost:1521/ORCLCDB as sysdba\",\"@healthcheck.sql\"]"
      "--health-interval=30s"
      "--health-retries=5"
      "--health-timeout=10s"
      "--network-alias=oracle-db"
      "--network=orcldb_default"
    ];
  };
  systemd.services."docker-orcldb-oracle-db" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "no";
    };
    after = [
      "docker-network-orcldb_default.service"
      "docker-volume-orcldb_oracle-backup.service"
      "docker-volume-orcldb_oracle-data.service"
    ];
    requires = [
      "docker-network-orcldb_default.service"
      "docker-volume-orcldb_oracle-backup.service"
      "docker-volume-orcldb_oracle-data.service"
    ];
    partOf = [
      "docker-compose-orcldb-root.target"
    ];
    wantedBy = [
      "docker-compose-orcldb-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-orcldb_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f orcldb_default";
    };
    script = ''
      docker network inspect orcldb_default || docker network create orcldb_default
    '';
    partOf = [ "docker-compose-orcldb-root.target" ];
    wantedBy = [ "docker-compose-orcldb-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-orcldb_oracle-backup" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect orcldb_oracle-backup || docker volume create orcldb_oracle-backup
    '';
    partOf = [ "docker-compose-orcldb-root.target" ];
    wantedBy = [ "docker-compose-orcldb-root.target" ];
  };
  systemd.services."docker-volume-orcldb_oracle-data" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect orcldb_oracle-data || docker volume create orcldb_oracle-data
    '';
    partOf = [ "docker-compose-orcldb-root.target" ];
    wantedBy = [ "docker-compose-orcldb-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-orcldb-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
