# Auto-generated using compose2nix v0.2.3.
{ pkgs, lib, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."pgadmin_container" = {
    image = "dpage/pgadmin4";
    environment = {
      "PGADMIN_CONFIG_SERVER_MODE" = "False";
      "PGADMIN_DEFAULT_EMAIL" = "pgadmin4@pgadmin.org";
      "PGADMIN_DEFAULT_PASSWORD" = "admin";
    };
    volumes = [
      "postgres_pgadmin:/var/lib/pgadmin:rw"
    ];
    ports = [
      "5050:80/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=pgadmin"
      "--network=postgres_postgres"
    ];
  };
  systemd.services."docker-pgadmin_container" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-postgres_postgres.service"
      "docker-volume-postgres_pgadmin.service"
    ];
    requires = [
      "docker-network-postgres_postgres.service"
      "docker-volume-postgres_pgadmin.service"
    ];
    partOf = [
      "docker-compose-postgres-root.target"
    ];
    wantedBy = [
      "docker-compose-postgres-root.target"
    ];
  };
  virtualisation.oci-containers.containers."postgres_container" = {
    image = "postgres";
    environment = {
      "PGDATA" = "/data/postgres";
      "POSTGRES_PASSWORD" = "postgres";
      "POSTGRES_USER" = "postgres";
    };
    volumes = [
      "postgres_postgres:/data/postgres:rw"
    ];
    ports = [
      "5432:5432/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=postgres"
      "--network=postgres_postgres"
    ];
  };
  systemd.services."docker-postgres_container" = {
    serviceConfig = {
      Restart = lib.mkOverride 500 "always";
      RestartMaxDelaySec = lib.mkOverride 500 "1m";
      RestartSec = lib.mkOverride 500 "100ms";
      RestartSteps = lib.mkOverride 500 9;
    };
    after = [
      "docker-network-postgres_postgres.service"
      "docker-volume-postgres_postgres.service"
    ];
    requires = [
      "docker-network-postgres_postgres.service"
      "docker-volume-postgres_postgres.service"
    ];
    partOf = [
      "docker-compose-postgres-root.target"
    ];
    wantedBy = [
      "docker-compose-postgres-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-postgres_postgres" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f postgres_postgres";
    };
    script = ''
      docker network inspect postgres_postgres || docker network create postgres_postgres --driver=bridge
    '';
    partOf = [ "docker-compose-postgres-root.target" ];
    wantedBy = [ "docker-compose-postgres-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-postgres_pgadmin" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect postgres_pgadmin || docker volume create postgres_pgadmin
    '';
    partOf = [ "docker-compose-postgres-root.target" ];
    wantedBy = [ "docker-compose-postgres-root.target" ];
  };
  systemd.services."docker-volume-postgres_postgres" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect postgres_postgres || docker volume create postgres_postgres
    '';
    partOf = [ "docker-compose-postgres-root.target" ];
    wantedBy = [ "docker-compose-postgres-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-postgres-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
